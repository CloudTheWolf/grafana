// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by informer-gen. DO NOT EDIT.

package v0alpha1

import (
	"context"
	time "time"

	peakqv0alpha1 "github.com/grafana/grafana/pkg/apis/peakq/v0alpha1"
	clientset "github.com/grafana/grafana/pkg/generated/clientset/clientset"
	internalinterfaces "github.com/grafana/grafana/pkg/generated/informers/externalversions/internalinterfaces"
	v0alpha1 "github.com/grafana/grafana/pkg/generated/listers/peakq/v0alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// QueryTemplateInformer provides access to a shared informer and lister for
// QueryTemplates.
type QueryTemplateInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v0alpha1.QueryTemplateLister
}

type queryTemplateInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewQueryTemplateInformer constructs a new informer for QueryTemplate type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewQueryTemplateInformer(client clientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredQueryTemplateInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredQueryTemplateInformer constructs a new informer for QueryTemplate type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredQueryTemplateInformer(client clientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.PeakqV0alpha1().QueryTemplates(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.PeakqV0alpha1().QueryTemplates(namespace).Watch(context.TODO(), options)
			},
		},
		&peakqv0alpha1.QueryTemplate{},
		resyncPeriod,
		indexers,
	)
}

func (f *queryTemplateInformer) defaultInformer(client clientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredQueryTemplateInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *queryTemplateInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&peakqv0alpha1.QueryTemplate{}, f.defaultInformer)
}

func (f *queryTemplateInformer) Lister() v0alpha1.QueryTemplateLister {
	return v0alpha1.NewQueryTemplateLister(f.Informer().GetIndexer())
}
