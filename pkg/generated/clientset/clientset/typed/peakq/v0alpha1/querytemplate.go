// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by client-gen. DO NOT EDIT.

package v0alpha1

import (
	"context"
	json "encoding/json"
	"fmt"
	"time"

	v0alpha1 "github.com/grafana/grafana/pkg/apis/peakq/v0alpha1"
	peakqv0alpha1 "github.com/grafana/grafana/pkg/generated/applyconfiguration/peakq/v0alpha1"
	scheme "github.com/grafana/grafana/pkg/generated/clientset/clientset/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// QueryTemplatesGetter has a method to return a QueryTemplateInterface.
// A group's client should implement this interface.
type QueryTemplatesGetter interface {
	QueryTemplates(namespace string) QueryTemplateInterface
}

// QueryTemplateInterface has methods to work with QueryTemplate resources.
type QueryTemplateInterface interface {
	Create(ctx context.Context, queryTemplate *v0alpha1.QueryTemplate, opts v1.CreateOptions) (*v0alpha1.QueryTemplate, error)
	Update(ctx context.Context, queryTemplate *v0alpha1.QueryTemplate, opts v1.UpdateOptions) (*v0alpha1.QueryTemplate, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v0alpha1.QueryTemplate, error)
	List(ctx context.Context, opts v1.ListOptions) (*v0alpha1.QueryTemplateList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v0alpha1.QueryTemplate, err error)
	Apply(ctx context.Context, queryTemplate *peakqv0alpha1.QueryTemplateApplyConfiguration, opts v1.ApplyOptions) (result *v0alpha1.QueryTemplate, err error)
	QueryTemplateExpansion
}

// queryTemplates implements QueryTemplateInterface
type queryTemplates struct {
	client rest.Interface
	ns     string
}

// newQueryTemplates returns a QueryTemplates
func newQueryTemplates(c *PeakqV0alpha1Client, namespace string) *queryTemplates {
	return &queryTemplates{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the queryTemplate, and returns the corresponding queryTemplate object, and an error if there is any.
func (c *queryTemplates) Get(ctx context.Context, name string, options v1.GetOptions) (result *v0alpha1.QueryTemplate, err error) {
	result = &v0alpha1.QueryTemplate{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("querytemplates").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of QueryTemplates that match those selectors.
func (c *queryTemplates) List(ctx context.Context, opts v1.ListOptions) (result *v0alpha1.QueryTemplateList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v0alpha1.QueryTemplateList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("querytemplates").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested queryTemplates.
func (c *queryTemplates) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("querytemplates").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a queryTemplate and creates it.  Returns the server's representation of the queryTemplate, and an error, if there is any.
func (c *queryTemplates) Create(ctx context.Context, queryTemplate *v0alpha1.QueryTemplate, opts v1.CreateOptions) (result *v0alpha1.QueryTemplate, err error) {
	result = &v0alpha1.QueryTemplate{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("querytemplates").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(queryTemplate).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a queryTemplate and updates it. Returns the server's representation of the queryTemplate, and an error, if there is any.
func (c *queryTemplates) Update(ctx context.Context, queryTemplate *v0alpha1.QueryTemplate, opts v1.UpdateOptions) (result *v0alpha1.QueryTemplate, err error) {
	result = &v0alpha1.QueryTemplate{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("querytemplates").
		Name(queryTemplate.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(queryTemplate).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the queryTemplate and deletes it. Returns an error if one occurs.
func (c *queryTemplates) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("querytemplates").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *queryTemplates) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("querytemplates").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched queryTemplate.
func (c *queryTemplates) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v0alpha1.QueryTemplate, err error) {
	result = &v0alpha1.QueryTemplate{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("querytemplates").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}

// Apply takes the given apply declarative configuration, applies it and returns the applied queryTemplate.
func (c *queryTemplates) Apply(ctx context.Context, queryTemplate *peakqv0alpha1.QueryTemplateApplyConfiguration, opts v1.ApplyOptions) (result *v0alpha1.QueryTemplate, err error) {
	if queryTemplate == nil {
		return nil, fmt.Errorf("queryTemplate provided to Apply must not be nil")
	}
	patchOpts := opts.ToPatchOptions()
	data, err := json.Marshal(queryTemplate)
	if err != nil {
		return nil, err
	}
	name := queryTemplate.Name
	if name == nil {
		return nil, fmt.Errorf("queryTemplate.Name must be provided to Apply")
	}
	result = &v0alpha1.QueryTemplate{}
	err = c.client.Patch(types.ApplyPatchType).
		Namespace(c.ns).
		Resource("querytemplates").
		Name(*name).
		VersionedParams(&patchOpts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
