// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by lister-gen. DO NOT EDIT.

package v0alpha1

import (
	v0alpha1 "github.com/grafana/grafana/pkg/apis/peakq/v0alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// QueryTemplateLister helps list QueryTemplates.
// All objects returned here must be treated as read-only.
type QueryTemplateLister interface {
	// List lists all QueryTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v0alpha1.QueryTemplate, err error)
	// QueryTemplates returns an object that can list and get QueryTemplates.
	QueryTemplates(namespace string) QueryTemplateNamespaceLister
	QueryTemplateListerExpansion
}

// queryTemplateLister implements the QueryTemplateLister interface.
type queryTemplateLister struct {
	indexer cache.Indexer
}

// NewQueryTemplateLister returns a new QueryTemplateLister.
func NewQueryTemplateLister(indexer cache.Indexer) QueryTemplateLister {
	return &queryTemplateLister{indexer: indexer}
}

// List lists all QueryTemplates in the indexer.
func (s *queryTemplateLister) List(selector labels.Selector) (ret []*v0alpha1.QueryTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v0alpha1.QueryTemplate))
	})
	return ret, err
}

// QueryTemplates returns an object that can list and get QueryTemplates.
func (s *queryTemplateLister) QueryTemplates(namespace string) QueryTemplateNamespaceLister {
	return queryTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// QueryTemplateNamespaceLister helps list and get QueryTemplates.
// All objects returned here must be treated as read-only.
type QueryTemplateNamespaceLister interface {
	// List lists all QueryTemplates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v0alpha1.QueryTemplate, err error)
	// Get retrieves the QueryTemplate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v0alpha1.QueryTemplate, error)
	QueryTemplateNamespaceListerExpansion
}

// queryTemplateNamespaceLister implements the QueryTemplateNamespaceLister
// interface.
type queryTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all QueryTemplates in the indexer for a given namespace.
func (s queryTemplateNamespaceLister) List(selector labels.Selector) (ret []*v0alpha1.QueryTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v0alpha1.QueryTemplate))
	})
	return ret, err
}

// Get retrieves the QueryTemplate from the indexer for a given namespace and name.
func (s queryTemplateNamespaceLister) Get(name string) (*v0alpha1.QueryTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v0alpha1.Resource("querytemplate"), name)
	}
	return obj.(*v0alpha1.QueryTemplate), nil
}
